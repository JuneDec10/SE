正则表达式

正则表达式（，在代码中常简写为、或），又称-{zh-cn:正规表示式; zh-tw:正则表达式; zh-hk:正规表示式;}-、正规表示法、正规运算式、规则运算式、常规表示法，是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。

许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及开的。正则表达式通常缩写成regex，单数有、，复数有、、。

的一般被译为正则、正规或常规。

最初的正则表达式出现于理论计算机科学的自动控制理论和形式化语言理论中。在这些领域中有对计算（自动控制）的模型和对形式化语言描述与分类的研究。

1940年，沃伦·麦卡洛克与将神经系统中的神经元描述成小而简单的自动控制元。

1950年代，数学家斯蒂芬·科尔·克莱尼利用称之为「正则集合」的数学符号来描述此模型。肯·汤普逊将此符号系统引入编辑器，随后是Unix上的编辑器，并最终引入grep。自此以后，正则表达式被广泛地应用于各种或类Unix系统的工具中。正则表达式的规范，分为基本型正则表达式（，）和扩展型正则表达式（，）两大流派。在兼容的系统上，和之类的工具都遵循规范，一些数据库系统中的正则表达式也符合规范。、、都属于，是历史最早的正则表达式，因此元字符必须转译之后才具有特殊含义。、则属于，元字符不用转译

的正则表达式源自于于1986年1月19日发布的，它已经演化成了（兼容正则表达式，，一个由开发的，为很多现代工具所使用的库。

各编程语言之间关于正则表达式的整合，目前开发进展得很差。的子项目的设计中已考虑到了这点。

正则表达式可以用形式化语言理论的方式来表达。正则表达式由常量和算子组成，它们分别表示字符串的集合和在这些集合上的运算。给定有限字母表Σ定义了下列常量：

定义了下列运算：

上述常量和算子形成了克莱尼代数。

很多课本使用对选择使用符号formula_20、formula_21或formula_22替代竖线。

为了避免括号，假定星号有最高优先级，接着是串接，接着是并集。如果没有歧义则可以省略括号。例如：codice_1可以写为codice_2而codice_3可以写为codice_4。

例子：

正则表达式为了避免多余的量词，定义了codice_8和codice_9，例如；codice_10可以被表达为codice_11；codice_12可以被表达为codice_13。有时增加补算子formula_26；formula_27表示在formula_28上但不在formula_12中的所有字符串的集合。补算子是多余的，因为它可以使用其他算子来表达（尽管计算这种表示的过程是复杂的，而结果可能以指数增大）。

这种意义上的正则表达式可以表达正则语言，精确的是可被有限状态自动机接受的语言类。但是在简洁性上有重要区别。某类正则语言只能用大小指数增长的自动机来描述，而要求的正则表达式的长度只线性的增长。

正则表达式对应于乔姆斯基层级的类型-3文法。但通常编程语言或其相关库（例如PCRE）中实现的正则表达式的表达能力是乔姆斯基层级中类型-3文法的超集。在另一方面，在正则表达式和不导致这种大小上的爆炸的非确定有限状态自动机（）之间有简单的映射；为此经常被用作正则表达式的替表示式。

我们还要在这种形式化中研究表达力。如下面例子所展示的，不同的正则表达式可以表达同样的语言：这种形式化中存在着冗余。

有可能对两个给定正则表达式写一个算法来判定它们所描述的语言是否本质上相等，简约每个表达式到极小确定有限自动机，确定它们是否同构（等价）。

这种冗余可以消减到什么程度？我们可以找到仍有完全表达力的正则表达式的有趣的子集吗？Kleene星号和并集明显是需要的，但是我们或许可以限制它们的使用。这提出了一个令人惊奇的困难问题。因为正则表达式如此简单，没有办法在语法上把它重写成某种规范形式。过去公理化的缺乏导致了星号高度问题。最近用克莱尼代数公理化了正则表达式。

很多现实世界的“正则表达式”引擎实现了不能用正则表达式代数表达的特征。

一个正则表达式通常被称为一个模式（），为用来描述或者匹配一系列符合某个句法规则的字符串。例如：Handel、Händel和Haendel这三个字符串，都可以由codice_14这个模式来描述。大部分正则表达式的形式都有如下的结构：


某个字符后的数量限定符用来限定前面这个字符允许出现的个数。最常见的数量限定符包括codice_9、codice_8和codice_19（不加数量限定则代表出现一次且仅出现一次）：


上述这些构造子都可以自由组合，因此codice_30和codice_31是相同的。

精确的语法可能因不同的工具或程序而异。

正则表达式有多种不同的风格。下表是在中元字符及其在正则表达式上下文中的行为的一个完整列表，适用于或者编程语言（或者的正则表达式文法是的子集）：
（以下使用PHP语言）

（以下使用Perl语言）


