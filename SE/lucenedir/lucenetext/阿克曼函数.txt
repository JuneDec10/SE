阿克曼函数

阿克曼函数是非原始递归函数的例子；它需要两个自然数作为输入值，输出一个自然数。它的输出值增长速度非常高。

1920年代后期，数学家大卫·希尔伯特的学生Gabriel Sudan和威廉·阿克曼，当时正研究计算的基础。Sudan发明了一个递归却非原始递归的。1928年，阿克曼又独立想出了另一个递归却非原始递归的函数。

他最初的念头是一个三个变数的函数A("m","n","p")，使用康威链式箭号表示法是"m"→"n"→"p"。阿克曼证明了它是递归函数。希尔伯特在"On the Infinite"猜想这个函数不是原始递归函数。阿克曼在"On Hilbert's Construction of the Real Numbers"证明了这点。

后来和拉斐尔·米切尔·罗宾逊定义了一个类似的函数，但只用两个变数。

以下是阿克曼函数的虚拟码：

Haskell 语言能生成更精确的定义:

递归是有界的，因为在每次应用递归时，要么 "m" 递减，要么 "m" 保持不变而 "n" 递减。每次 "n" 达到零，"m" 递减，所以 "m" 最终可以达到零。（较技术性的表达：在每种情况下，有序对("m", "n")按字典次序递减，它保持了非负整数的良序关系）。但是，在 "m" 递减的时候， "n" 的增加没有上界，而且增加的幅度比较大。

这个函数亦可用康威链式箭号表示法来作一个非递回性的定义：
即是

使用hyper运算符就是

使用高德纳箭号表示法则为

! "m"\"n"
! 0
! 1
! 2
! 3
! 4
! n
! 0
! 1
! 2
! 3
! 4
