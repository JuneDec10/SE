函数式编程

函数式编程（）或称函数程序设计、泛函编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程式状态以及易变物件。其中，λ演算（lambda calculus）为该语言最重要的基础。而且，λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。

比起指令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。







函数式编程中最古老的例子莫过于1958年被创造出来的Lisp了。函数式编程更加现代一些的例子包括Clean、Clojure、Erlang、Haskell、Miranda、Scheme等。

虽然λ演算并非设计来于计算机上执行，但它可以被视作第一个函数式编程语言。1980年代末期，集函数式编程研究成果于大成的Haskell发布。

基于JavaScript的某些开发理念强调函数式的实现方法。

函数式编程常被认为严重耗费CPU和记忆体资源。主因有二：

