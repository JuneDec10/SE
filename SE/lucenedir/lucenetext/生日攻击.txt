生日攻击

生日攻击是一种密码学攻击手段，所利用的是概率论中生日问题的数学原理。这种攻击手段可用于滥用两个或多个集团之间的通信。此攻击依赖于在随机攻击中的高碰撞概率和固定置换次数（鸽巢原理）。使用生日攻击，攻击者可在formula_1中找到散列函数碰撞，formula_2为安全性。然而，量子计算机可在formula_3内进行生日攻击（虽然饱受争论）。

举个例子，想象一位老师问一个有30名学生的班级（n = 30）每个人的生日在哪一天（为简便，此处省略闰年）以确定是否有两个学生同一天生日（对应碰撞 ）。从直觉角度考虑，机率看起来很小。若老师选择特定日期（例如9月16日），则至少有一名学生在那天出生的概率是formula_4，约为7.9%。但是，与我们的直觉相反的是，至少一名学生和另外"任意"一名学生有着相同生日的概率大约为70.63%（n = 30时），从方程formula_5中可看出。

给定函数formula_6，攻击目标是找到符合formula_7的两个不同输入formula_8。这一对formula_8被称之为碰撞。用于找到一对碰撞的方法仅需要评估函数formula_6的随机或伪随机选择的不同输入值，直到攻击者找到相同的结果至少两次为止。由于生日问题，这种方法的效率不高。明确的说，若函数formula_11所拥有的formula_12的不同输出有着相同可能性且formula_12足够大的话，我们将期望在评估函数平均大约formula_14个不同个自变量后才能得到符合formula_7的不同一对自变量formula_16和formula_17。

思考下面一个实验。从下列的"H"数集中我们将随机均匀地选择"n"个值，因此将允许重复。使"p"（"n"; "H"）成为此实验中至少一个值被选择一次的概率。则概率可估计为

使"n"（"p"; "H"）为我们将选择的最小数值，这种情况下找到碰撞的概率至少为 "p"。通过颠倒上方的表达式，我们得到了下列估计公式：

将碰撞概率设为0.5我们将得到

使"Q"（"H"）成为我们在寻找首次碰撞前所期望的值的数量。此数量可通过下列公式进行估计：

举个例子，若使用64位哈希，则估计将有1.8 × 10个不同的输出。若这些输出均可能发生（理想情况下），则攻击者“仅仅”需要约50亿次尝试（5.38 × 10）就能通过暴力攻击生成碰撞。此值被称为 生日界限（birthday bound）而对于"n"位密码则需要2次。下列举出其他例子

显而易见，若函数的输出不平均分布，碰撞则可能将被更快找到。哈希函数的“平衡”概念量化了其能抵御生日攻击（攻击平均的密钥分布）的次数。然而，确定哈希函数的平衡将需要计算所有输入，因此这种方法对于诸如MD及SHA系的流行哈希函数是不切实际的。
当计算formula_22中的子表达式formula_23翻译到常见的编程语言如codice_1下，公式由于对较小的formula_24的计算精度不高。例如，当codice_2（如C99中一样）可用时，应直接使用可达到相同效果的表达式codice_3。 If this is not done, the first column of the above table is computed as zero, and several items in the second column do not have even one correct significant digit.

下列是能准确生成上方表格中大多数数值的Python函数：

from math import log1p, sqrt

def birthday(probability_exponent, bits):

若代码保存在命名为codice_4的文件中，您可和下面的例子一样交互运行此程序：
一项经验法则可适用于此关系中的心算流程

可改写为

或

此公式在概率小于等于0.5时有效。

此近似方案在使用指数时可轻易使用。例如，假设您正构建32位哈希（formula_28）且希望碰撞概率为100万分之一（formula_29），则最多我们需要多少份文档？

即与正确答案93次近似。

数位签章可对生日攻击十分敏感。设想一条被首次计算formula_31（formula_6为密码杂凑函数）所签名的信息，且随后又使用了一些密钥来签名formula_31。假设爱丽丝与鲍伯牵涉到签名诈骗合同。马洛里准备了一份正常合同formula_34和一份伪造合同formula_35。她随后发现formula_34所在的位置数可在不改变原意的情况下（如插入逗号、清空行、在句后增加一两个空格、替换同义词等等）被更改。通过结合这些更改，她可新建诸多formula_34的变体且均为正常合同。

相似情况下，马洛里也为伪造合同formula_35新建了诸多变体。她随后应用哈希函数到所有变体直到她找到与正常合同有着相同哈希值formula_39的伪造合同位置。她随后将正常合同带给鲍勃签名。在鲍勃签名完后，马洛里将签名取下并依附到伪造签名上。此签名“证实了”鲍勃签署了伪造合同。

此例中，攻击概率与原始的生日问题稍有不同，因为马洛里将在寻找两份具有相同哈希的正常合同与伪造合同时将一无所获。马洛里的策略是生成一份伪造和一份正常的合同。生日问题公式适用于formula_40为合同对数的情况下。但马洛里所生成的哈希数实际上为formula_41。

为避免这种攻击，用于签名方案的哈希函数的输出长度应够大以从计算角度防止生日攻击。换言之，位数应为防止普通暴力破解所需位数的两倍。

除了使用更大的位数长度外，签名者（鲍勃）可以在签名前做出一些随机且无害的更改，并且在自己的手上留下一份合同副本以在法庭上展示出他的签名与正常合同上的匹配，而不匹配伪造合同。

离散对数 Pollard Rho 算法是一项使用生日攻击以计算离散对数的算法。



