MD5

MD5讯息摘要演算法（），一种被广泛使用的密码杂凑函数，可以产生出一个128位元（16位元组）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（）设计，于1992年公开，用以取代MD4演算法。这套演算法的程序在 RFC 1321 中被加以规范。

将数据（如一段文字）运算变为另一固定长度值，是杂凑算法的基础原理。

1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的资料，专家一般建议改用其他演算法，如SHA-2。2004年，证实MD5演算法无法防止碰撞（collision），因此不适用于安全性认证，如SSL公开金钥认证或是数位签章等用途。

1992年8月，罗纳德·李维斯特向互联网工程任务组（IETF）提交了一份重要文件，描述了这种算法的原理。由于这种算法的公开性和安全性，在90年代被广泛使用在各种程序语言中，用以确保资料传递无误等。

MD5由MD4、MD3、MD2改进而来，主要增强算法复杂度和不可逆性。

目前，MD5算法因其普遍、稳定、快速的特点，仍广泛应用于普通数据的错误检查领域。例如在一些BitTorrent下载中，软件将通过计算MD5检验下载到的文件片段的完整性。

MD5已经广泛使用在为文件传输提供一定的可靠性方面。例如，服务器预先提供一个MD5校验和，用户下载完文件以后，用MD5算法计算下载文件的MD5校验和，然后通过检查这两个校验和是否一致，就能判断下载的文件是否出错。

MD5是输入不定长度信息，输出固定长度128-bits的演算法。经过程序流程，生成四个32位数据，最后联合起来成为一个128-bits散列。基本方式为，求余、取余、调整长度、与链接变量进行循环运算。得出结果。

formula_5 是 "XOR", "AND", "OR" , "NOT" 的符号。

一般128位的MD5散列被表示为32位十六进制数字。以下是一个43位长的仅ASCII字母列的MD5散列：

即使在原文中作一个小变化（比如用c取代d）其散列也会发生巨大的变化：

空文的散列为：

2009年，中国科学院的谢涛和冯登国仅用了2的碰撞算法复杂度，破解了MD5的碰撞抵抗，该攻击在普通计算机上运行只需要数秒钟。




