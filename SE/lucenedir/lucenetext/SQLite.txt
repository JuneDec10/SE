SQLite

SQLite （ or ）是遵守ACID的关系数据库管理系统，它包含在一个相对小的C程式库中。与许多其它数据库管理系统不同，SQLite不是一个客户端/服务器结构的数据库引擎，而是被集成在用户程序中。

SQLite遵守ACID，实现了大多数SQL标准。它使用动态的、弱类型的SQL语法。它作为嵌入式数据库，是应用程序，如网页浏览器，在本地/客户端存储数据的常见选择。它可能是最广泛部署的数据库引擎，因为它正在被一些流行的浏览器、操作系统、嵌入式系统所使用。同时，它有许多程序设计语言的语言绑定。

SQLite是建立的公有领域项目。

不像常见的客户端/服务器结构数据库管理系统，SQLite引擎不是一个应用程序与之通信的独立进程。SQLite库链接到程序中，并成为它的一个组成部分。这个库也可被动态链接。应用程序经由编程语言内的直接API调用来使用SQlite的功能，这在减少数据库访问延迟上有积极作用，因为在一个单一进程中的函数调用比跨进程通信更有效率。SQLite将整个数据库，包括定义、表、索引以及数据本身，作为一个单独的、可跨平台使用的文件存储在主机中。它采用了在写入数据时将整个数据库文件加锁的简单设计。尽管写操作只能串行进行，但SQLite的读操作可以多任务同时进行。

SQLite将PostgreSQL作为参考平台。项目将“PostgreSQL可能做些什么”作为SQL标准实现的开发参考。然而与这个目标最重要的偏差在于，除了主键以外，SQLite不强制进行类型检查。一个值的类型是动态的，不被schema所强制限制（虽然如此，但如果可以进行可恢复的类型转换时，schema会在存储数据时触发一个自动转换）。

程式库实现了多数的SQL-92标准，包括事务，以及实现原子性、一致性、隔离性和持久性（即ACID），但它缺失了某些特性。例如，它仅部分支持触发器。尽管它支持大多数的复杂查询，但它的ALTER TABLE功能有所限制，不能修改或删除列，只能通过重新建立表的方式迂回进行。

SQLite不进行类型检查。你可以把字符串插入到整数列中。某些用户发现这是使数据库更加有用的创新，特别是与无类型的脚本语言一起使用的时候；然而其他用户认为这是主要的缺点。

多个进程或线程可以同时存取同一个数据而没有问题。可以同时平行读取同一个资料库。但同一时间只能有一个进程或线程进行资料写入；否则会写入失败并得到一个错误讯息（或者会自动重试一段时间；自动重试的逻辑以及重试时间的长短是可以设定的）。

程式设计者还提供了一个叫做sqlite3的独立程序用来查询和管理SQLite数据库文件。SQLite的使用者可以把这个程式当作如何写SQLite应用程式的范例。

目前有大量的编程语言提供使用SQLite的绑定，包括：
