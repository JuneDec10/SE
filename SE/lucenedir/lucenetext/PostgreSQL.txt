PostgreSQL

PostgreSQL是自由的对象-关系型数据库服务器（数据库管理系统），在灵活的BSD许可证下发行。它在其他开放源代码数据库系统（比如MySQL和Firebird），和专有系统（比如Oracle、Sybase、IBM的DB2和Microsoft SQL Server）之外，为用户又提供了一种选择。

PostgreSQL不寻常的名字导致一些读者停下来尝试拼读它，特别是那些把SQL拼读为"sequel"的人。PostgreSQL开发者把它拼读为"post-gress-Q-L"。（Audio sample，5.6k MP3）。它也经常被简略念为"postgres"。

PostgreSQL经历了长时间的演变，开始于在UC Berkeley的Ingres计划。这个计划的领导者迈克尔·斯通布雷克在1982年离开Berkeley去商业化Ingres，但是最后还是返回了学术界。在1985年返回Berkeley之后，Stonebraker开始了post-Ingres计划来致力于在1980年代早期变得日益清楚的、当代数据库系统的问题。Postgres和Ingres的代码库开始（并保持）完全分离了。

新项目Postgres的目的是通过增加所需要的最少的功能来完全支持类型。这些功能包括类型定义和完整描述联系的能力。
完整描述联系的能力之前虽广为使用但却需要用户来维护。Postgres的数据库能够"理解"联系，并可以使用"规则"以自然的方式在有关的表中检索信息。

从1986年开始项目组发表了一些描述系统基本原理的论文，并在1988年这项计划建成并运行了一个原型版本。项目组在1989年六月向少数用户发行了版本1，随后在1990年六月发行了带有重写后的规则系统的版本2。1991年的版本3再次重写了规则系统，并增加了对多个存储管理器和改进的查询引擎的支持。在1993年就有大量的用户存在了，并开始用对支持和特征的要求淹没这个计划。在发行了主要作为最后清理的版本4之后计划就终止了。

尽管Postgres计划正式的终止了，BSD许可证（Berkeley在其下发行的Postgres）却使开放源代码开发者获得副本并进一步开发系统。在1994年，两个UC Berkeley大学的研究生 Andrew Yu和Jolly Chen 增加了一个SQL语言解释器来替代早先的基于Ingres的QUEL系统，建立了Postgres95。代码随后被发行到web上来在世界上找寻它自己的出路。在1996年计划被重命名了：为了反映数据库的新SQL查询语言，Postgres95变成了PostgreSQL。

第一次PostgreSQL发行形成了版本6.0。随后来自世界各地的一组数据库开发者和志愿者，通过Internet协作起来，维护着这套软件。自从版本6.0之后，出现了很多后续发行，在系统中也出现了很多改进；在2005年1月19日，版本8.0成为当前发行。自8.0后，PostgreSQL以原生（Native）的方式，运行于Windows系统。

尽管许可证允许Postgres的商业化，Postgres代码没有像Ingres那样快速的被商业开发-- 考虑到Postgres提供的好处这有些令人惊奇。主要分支起源于Paula Hawthorn（从Ingres转移来的最初的Ingres项目组成员）和Michael Stonebraker组建Illustra信息技术公司来商业化Postgres的时候。

在2005年一月，PostgreSQL收到了它来自数据库厂商的第一份援助。Pervasive Software（）宣布了商业支持和社区参与。

2000年，前Red Hat投资者筹组了一间名为Great Bridge的公司来商业化PostgreSQL，以和其他商用资料库厂商竞争。Great Bridge资助了好几位PostgreSQL开发者，并且贡献回馈了许多资源给社群。然而到了2001年末，Great Bridge终止了营运，因为像是Red Hat...等等公司面临了严酷的竞争，且市场状况不佳。

2001年，Command Prompt, Inc.发布了Mammoth PostgreSQL，最老牌的PostgreSQL商业软件。他们透过对开发者的赞助和对如同PL/Perl、PL/php、维护PostgreSQL Build Farm ...等等方式来支援PostgreSQL社群。

2005年1月，PostgreSQL接到了来自另一间资料库厂商Pervasive Software的支持，他们以十分常见于Novell NetWare平台的Btrieve产品而闻名。他们宣布了进行商业支援和对社群的参与。在他们得到成功一段时间后的2006年7月，Pervasive Software离开了PostgreSQL的支援市场。

在2005年中，两间其他的公司宣布商业化PostgreSQL，分别进入不同的利基市场。EnterpriseDB宣布将专注于让使用Oracle的应用程式能更容易的在PostgreSQL上运行。Greenplum则专注贡献在资料仓储和商业智慧的应用程式，尤其以BizGres专案著称。

2005年10月，升阳的软体部门执行副总裁John Loiacono谈论到："我们不会去OEM微软的产品，我们正关注-{zh-hans: 着; zh-hant:著;}-PostgreSQL"，尽管当时并没有任何规格释出。到了2005年11月，升阳宣布将支援PostgreSQL。2006年6月，Solaris 10包含PostgreSQL一起发布。

至于PostgreSQL专案本身，他继续着每年一个主要版本发布，以及次要的除错版本发布，全都可以在BSD授权下取得。这些都是基于商业化厂商、支援公司、和开放源码骇客。

如果很粗略地观察PostgreSQL，会觉得这个数据库系统和其它数据库很类似。因为PostgreSQL使用SQL语言来在执行资料的查询。这些资料通过外键联系在一起，以一系列表格的形式存在。PostgreSQL相对于竞争者的主要优势为可编程性：对于使用数据库资料的实际应用，PostgreSQL让开发与使用变得更简单。

SQL数据在"平面表格"中存储简单的数据类型，需要用户使用查询把有关的信息收集在一起。这与应用和用户利用数据自身的方式相对立：典型的使用带有丰富数据类型的高级语言，在其中所有有关的数据作为它自己的一个完整单元来操作。典型的称呼为"记录"或"对象"（依据各自语言）。

转换来自SQL世界的信息到面向对象编程世界体现得很困难，因为两者有非常不同的数据组织的模型。工业界把这个问题称为：从一个模型映射到另一个要花费项目开发者40%的时间。一些映射解决方案，典型的称为对象关系映射，致力于这个问题，但是它们花费很多并有自身的问题，导致糟糕的性能或强制所有的数据访问通过映射所支持的一种语言来进行。

PostgreSQL可以直接在数据库中解决很多这类问题。PostgreSQL允许用户定义基于正规的SQL类型的新类型，允许数据库自身理解复杂数据。例如，你可以定义一个codice_1来组合一些事物如街道编号、城市和国度的字符串。从这一点上你可以轻易的建立把保存地址的所需要的所有字段包含在一个单一行列中的表。

PostgreSQL还允许类型包括继承，这是在面向对象编程中的主要概念。例如，你可以定义codice_2类型，并接着基于它建立codice_3和codice_4。在数据库中的address就可以采用codice_5或者codice_6形式，而特定的规则可以在各自情况下验证数据。在PostgreSQL的早期版本中，实现新类型需要写C扩展并把它们编译到数据库服务器中；在版本7.4中，通过codice_7建立和使用定制类型变得很容易了。

数据库自身的编程可以从使用函数上获得巨大的利益。多数SQL系统允许用户写"存储过程"，它是其他SQL语句可以调用的一块SQL代码。但是SQL自身仍旧不适合作为编程语言，而且SQL用户在构造复杂逻辑时要经历巨大的困难。更糟糕的是，SQL自身不支持很多的编程语言中最基本的操作，比如分支和循环。每个厂商都转而写它们自己对SQL语言的扩展来增加这些特征，而这种扩展不是必须跨越数据库平台操作。

在PostgreSQL中程序员可以用一组可观的支持语言中任何一种来写这种逻辑。


程序员可以把代码作为函数插入服务器中，它是使代码类似于存储过程的一个小包装器。以这种方式SQL代码可以调用（比如）C代码或反之。


这些优势合起来可以证实PostgreSQL从编程角度是最高级的数据库系统。使用PostgreSQL可以显著的减少很多项目的整体编程时间，这种优势随着项目复杂而增长。

通过函数，可以在数据库服务器端执行指令程序。尽管这样的指令程序可以使用基本的SQL语句写成，但是由于其缺乏流程控制等功能，所以在PostgreSQL中引入了使用其它程序语言编写函数的能力，包括：


以上部分的语言，甚至可以在触发器内执行。PostgreSQL支持行返回函数：它们的输出是一系列行类型数据的集合，可以在查询中当作表来使用。函数也可以被定义成以创建者或者调用者的身份运行。在某些场合，或者其他的数据库产品中，函数也会被称为“存储过程”，但技术上这两者并未有太大分别。

在PostgreSQL中，用户可以自定义索引方法，或使用内置的B树，哈希表与GiST索引。PosrgreSQL的索引功能同时也具有以下功能：


触发器是由SQL语句查询所触发的事件。如：一个INSERT语句可能触发一个检查数据完整性的触发器。触发器通常由INSERT或UPDATE语句触发。

在PostgreSQL中，可在数据表上设置触发器，但无法在视图中设置(对视图的UPDATE或者INSERT操作可以使用规则（RULE）定义）。多个触发器可依据字母顺序依次执行。此外，除了使用内嵌的PL/PgSQL语言之外，触发器的函数也可以用PL/Perl，PL/Python等语言编写。

PostgreSQL使用多版本并发控制（MVCC，Multiversion concurrency control）系统进行并发控制，该系统向每个用户提供了一个数据库的“快照”，用户在事务内所作的每个修改，对于其他的用户都不可见，直到该事务成功提交。这从很大程度上减少了对读取锁的依赖，同时保证了数据库高效地符合ACID原则。

规则（RULE）允许一个查询能被重写，通常用来实现对视图（VIEW）的操作，如插入（INSERT）、更新（UPDATE）、删除（DELETE）。

PostgreSQL内置丰富的数据类型，包括：

此外，用户可以创建自定义数据类型，通常通过PostgreSQL的GiST机制，它们也能被很好得索引，比如PostGIS地理信息系统的数据类型。

用户可以为数据库内几乎所有的对象定义新的类型，包括：

数据表的结构及属性可从一个“父”表中继承，数据将在两者间共享。对子表中数据的插入或者删除也将在父表中-{zh-hans:体现; zh-tw:呈现}-，同样，对父表作出的修改，比如-{zh-hans:添加; zh-tw:新增}-列等操作也会导致子表产生相应的-{zh-hans:改动; zh-tw:变更}-。该功能尚未完全实现，实际上，表的约束尚不能继承。比如，在一张外联参考了父表id字段的表中，插入一条具有子表中某条记录id数据的记录会导致失败，因为PostgreSQL在对父表的外键约束检查中不会检查子表的内容。




PostgreSQL - Red Hat Edition是由Red Hat制作-{zh-hans: 的; zh-hant: 之;}-分支版本，又称Red Hat Database。


