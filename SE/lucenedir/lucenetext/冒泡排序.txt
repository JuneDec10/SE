冒泡排序

冒泡排序（）-{zh-tw:又称为泡沫排序，; zh-cn:;}-是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢「浮」到数列的顶端。

冒泡排序对formula_1个项目需要O(formula_2)的比较次数，且可以原地排序。尽管这个演算法是最简单了解和实作的排序算法之一，但它对于包含大量的元素的数列排序是很没有效率的。

冒泡排序是与插入排序拥有相等的执行时间，但是两种算法在需要的交换次数却很大地不同。在最坏的情况，冒泡排序需要formula_3次交换，而插入排序只要最多formula_4交换。冒泡排序的实现（类似下面）通常会对已经排序好的数列拙劣地执行（formula_3），而插入排序在这个例子只需要formula_4个运算。因此很多现代的演算法教科书避免使用冒泡排序，而用插入排序取代之。冒泡排序如果能在内部回圈第一次执行时，使用一个旗标来表示有无需要交换的可能，也可以把最优情况下的复杂度降低到formula_4。在这个情况，已经排序好的数列就无交换的需要。若在每次走访数列时，把走访顺序反过来，也可以稍微地改进效率。有时候称为鸡尾酒排序，因为演算法会从数列的一端到另一端之间穿梭往返。

冒泡排序演算法的运作如下：

由于它的简洁，冒泡排序通常被用来对于程式设计入门的学生介绍演算法的概念。

 i∈[0,N-1) //循环N-1遍

输入：（在程式同目录下的文本文件：input.txt）

　一行：等待排序的数（用空格隔开）；

　实例：194 638 124 482 469 245 852 294 484 243 623

输出：（在程式同目录下的文本文件：output.txt）

　一行：已经排好的数（从小到大）；

　实例：124 194 243 245 294 469 482 484 623 638 852 

范例：
输出：

 '泡沫排序由大到小的程式，预先产生一储存乱数内容的阵列B，使用中断点check，

调用：

调用:
